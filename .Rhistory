#"xcolor",
)
# tinytex::install_tinytex()
#To unload packages
#detach("package:markdown", unload = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# code.path = getwd()
source("./Linear Regression Functions.R")
source("./Visualize_Plots.R")
set.seed(232354)
# dat = read.csv('condominium.csv')
hundredths <- seq(from=0, to=1, by=.01)
nvalues = 5000
dat = data.frame("y" = round( runif(nvalues, -0, 20000), 2 ), #c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
'x1' = round( runif(nvalues, -300, 800), 2 ), #c(69, 118.5, 116.5, 125, 129.9, 135, 139.9, 147.9, 160, 169.9, 134.9, 155, 169.9, 194.5, 209.9),
'x2' = sample(hundredths, size=nvalues, replace=TRUE),
'x3'	 = round( runif(nvalues, -0.005, 1.0049), 2 ),
'x4'	 = sample(1:1000, size = nvalues, replace=T),
'x5' = seq(1:nvalues),
'x6' = c(1, 2, rep(NA, nvalues-2)),
'x7' = rep_len(c("R", "O", "Y", "G", "B", "I", "V"), length.out = nvalues)
)
source("./Visualize_Plots.R")
plot.dat(dat = dat, y = "y", x1 = "x1")
source("./Descriptive Stats.R")
DescriptiveTables(df = dat, measure = "x6", round_to = 1)
df = dat
measure = "x6"
round_to = 1
tryCatch(
{
x = shapiro.test(df[,measure])
},
error = function(df) {
print("hello")
}
)
x = shapiro.test(df[3:5000,measure])
df[3:5000,measure]
x = shapiro.test(df[3:5000,"x3"])
x
tryCatch(
{
x = shapiro.test(df[,measure])
},
error = function() {
x = data.frame()
x$p.value = "Cannot compute: Groups must be between 3 and 5000"
x$statistic = "Cannot compute: Groups must be between 3 and 5000"
return(x)
}
)
shapiro.test(df[,measure])
tryCatch(
{
x = shapiro.test(df[,measure])
},
error = function() {
x = data.frame()
x$p.value = "Cannot compute: Groups must be between 3 and 5000"
x$statistic = "Cannot compute: Groups must be between 3 and 5000"
return(x)
}
)
x
x$p.value = "Cannot compute: Groups must be between 3 and 5000"
x$statistic = "Cannot compute: Groups must be between 3 and 5000"
x
x.temp = shapiro.test(df[3:5000,"x3"])
x.temp
x$statistic = round(unname(shapiro.test(x.temp$statistic), round_to)
},
x$statistic = round(unname(shapiro.test(x.temp$statistic), round_to))
x$statistic = round(unname(shapiro.test(x.temp)$statistic), round_to)
unname(x.temp)
tryCatch(
{
x.temp = shapiro.test(df[,measure])
x = data.frame()
x$p.value = "Cannot compute: Groups must be between 3 and 5000"
x$statistic = round(unname(x.temp)$statistic), round_to)
tryCatch(
{
x.temp = shapiro.test(df[,measure])
x = data.frame()
x$p.value = "Cannot compute: Groups must be between 3 and 5000"
x$statistic = round(unname(x.temp)$statistic, round_to)
},
error = function() {
x = data.frame()
x$p.value = "Cannot compute: Groups must be between 3 and 5000"
x$statistic = "Cannot compute: Groups must be between 3 and 5000"
return(x)
}
)
tryCatch(
{
x.temp = shapiro.test(df[,measure])
x = data.frame()
x$p.value = "Cannot compute: Groups must be between 3 and 5000"
x$statistic = round(unname(x.temp)$statistic, round_to)
},
error = function(df) {
x = data.frame()
x$p.value = "Cannot compute: Groups must be between 3 and 5000"
x$statistic = "Cannot compute: Groups must be between 3 and 5000"
return(x)
}
)
x.temp = shapiro.test(df[3:5000,"x3"])
tryCatch(
{
x.temp = shapiro.test(df[,measure])
x = data.frame()
x$p.value = round(unname(x$statistic), 3)
x$statistic = round(unname(x.temp)$statistic, 3)
},
error = function(df) {
x = data.frame()
x$p.value = "Cannot compute: Groups must be between 3 and 5000"
x$statistic = "Cannot compute: Groups must be between 3 and 5000"
return(x)
}
)
x.temp = shapiro.test(df[,measure])
x.temp = shapiro.test(df[3:5000,"x3"])
x = data.frame()
x$p.value = round(unname(x.temp$statistic), 3)
unname(x.temp$statistic)
round(unname(x.temp$statistic), 3)
x$p.value
x = data.frame(
"p.value" = round(unname(x.temp$statistic), 3)
)
x = data.frame(
"p.value" = round(unname(x.temp$p.value), 3)
)
x = data.frame(
"p.value" = round(unname(x.temp$p.value), 3),
"statistic" = round(unname(x.temp)$statistic, 3)
)
unname(x.temp)$statistic
x.temp
str(x.temp)
x.temp$statistic
x = data.frame(
"p.value" = round(unname(x.temp$p.value), 3),
"statistic" = round(unname(x.temp)$statistic, 3)
)
x = data.frame(
"p.value" = round(unname(x.temp$p.value), 3),
"statistic" = round(unname(x.temp$statistic), 3)
)
x = data.frame(
"p.value" = round(unname(x.temp$p.value), 3),
"statistic" = round(unname(x.temp$statistic), 3)
)
x
x$p.value
x.temp = shapiro.test(df[,measure])
x.temp = shapiro.test(df[3:5000,"x3"])
x = data.frame(
"p.value" = round(unname(x.temp$p.value), 3),
"statistic" = round(unname(x.temp$statistic), 3)
)
x
x$p.value
tryCatch(
{
x.temp = shapiro.test(df[,measure])
x = data.frame(
"p.value" = round(unname(x.temp$p.value), 3),
"statistic" = round(unname(x.temp$statistic), 3)
)
},
error = function(df) {
x = data.frame(
"p.value" = "Cannot compute: Groups must be between 3 and 5000",
"statistic" = "Cannot compute: Groups must be between 3 and 5000"
)
return(x)
}
)
shap.df =
tryCatch(
{
x.temp = shapiro.test(df[,measure])
x = data.frame(
"p.value" = round(unname(x.temp$p.value), 3),
"statistic" = round(unname(x.temp$statistic), 3)
)
},
error = function(df) {
x = data.frame(
"p.value" = "Cannot compute: Groups must be between 3 and 5000",
"statistic" = "Cannot compute: Groups must be between 3 and 5000"
)
return(x)
}
)
df %>%
summarise(Count_Patients = sum(!is.na(!!as.name(measure))),
Mean = round(mean(!!as.name(measure), na.rm = TRUE), round_to),
SD = round(sd(!!as.name(measure), na.rm = TRUE), round_to),
Median = round(median(!!as.name(measure), na.rm = TRUE), round_to),
Mode  = round(mode(!!as.name(measure), na.rm = TRUE), round_to),
Sum = round(sum(!!as.name(measure), na.rm = TRUE), round_to),
Skew = round(moments::skewness(!!as.name(measure), na.rm = TRUE), round_to),
Kurtosis = round(moments::kurtosis(!!as.name(measure), na.rm = TRUE), round_to),
IQR = round(IQR(!!as.name(measure), na.rm = TRUE), round_to),
Min = round(min(!!as.name(measure), na.rm = TRUE), round_to),
Max = round(max(!!as.name(measure), na.rm = TRUE), round_to),
Shapiro_W = round(shap.df$statistic, 3),
Shapiro_p = format(signif(shap.df$p.value, 3), format = "e", digits = 2),
Count = n(),
Quantile = list(stats::quantile(!!as.name(measure), probs = seq(.25, 1, by = .25), na.rm = TRUE))
)
df %>%
summarise(
# Count_Patients = sum(!is.na(!!as.name(measure))),
# Mean = round(mean(!!as.name(measure), na.rm = TRUE), round_to),
# SD = round(sd(!!as.name(measure), na.rm = TRUE), round_to),
# Median = round(median(!!as.name(measure), na.rm = TRUE), round_to),
# Mode  = round(mode(!!as.name(measure), na.rm = TRUE), round_to),
# Sum = round(sum(!!as.name(measure), na.rm = TRUE), round_to),
# Skew = round(moments::skewness(!!as.name(measure), na.rm = TRUE), round_to),
# Kurtosis = round(moments::kurtosis(!!as.name(measure), na.rm = TRUE), round_to),
# IQR = round(IQR(!!as.name(measure), na.rm = TRUE), round_to),
# Min = round(min(!!as.name(measure), na.rm = TRUE), round_to),
# Max = round(max(!!as.name(measure), na.rm = TRUE), round_to),
Shapiro_W = round(shap.df$statistic, 3),
Shapiro_p = format(signif(shap.df$p.value, 3), format = "e", digits = 2),
# Count = n(),
# Quantile = list(stats::quantile(!!as.name(measure), probs = seq(.25, 1, by = .25), na.rm = TRUE))
)
round(shap.df$statistic, 3)
shap.df
shap.df =
tryCatch(
{
x.temp = shapiro.test(df[,measure])
x = data.frame(
"p.value" = format(signif(x.temp$statistic, 3), format = "e", digits = 2)#round(unname(x.temp$p.value), 3),
"statistic" = format(signif(x.temp$statistic, 2), format = "e", digits = 2)#round(unname(x.temp$statistic), 3)
shap.df =
tryCatch(
{
x.temp = shapiro.test(df[,measure])
x = data.frame(
"p.value" = format(signif(x.temp$statistic, 3), format = "e", digits = 2),#round(unname(x.temp$p.value), 3),
"statistic" = format(signif(x.temp$statistic, 2), format = "e", digits = 2)#round(unname(x.temp$statistic), 3)
)
},
error = function(df) {
x = data.frame(
"p.value" = "Cannot compute: Groups must be between 3 and 5000",
"statistic" = "Cannot compute: Groups must be between 3 and 5000"
)
return(x)
}
)
df %>%
summarise(
# Count_Patients = sum(!is.na(!!as.name(measure))),
# Mean = round(mean(!!as.name(measure), na.rm = TRUE), round_to),
# SD = round(sd(!!as.name(measure), na.rm = TRUE), round_to),
# Median = round(median(!!as.name(measure), na.rm = TRUE), round_to),
# Mode  = round(mode(!!as.name(measure), na.rm = TRUE), round_to),
# Sum = round(sum(!!as.name(measure), na.rm = TRUE), round_to),
# Skew = round(moments::skewness(!!as.name(measure), na.rm = TRUE), round_to),
# Kurtosis = round(moments::kurtosis(!!as.name(measure), na.rm = TRUE), round_to),
# IQR = round(IQR(!!as.name(measure), na.rm = TRUE), round_to),
# Min = round(min(!!as.name(measure), na.rm = TRUE), round_to),
# Max = round(max(!!as.name(measure), na.rm = TRUE), round_to),
Shapiro_W = shap.df$statistic,
Shapiro_p = shap.df$p.value,
# Count = n(),
# Quantile = list(stats::quantile(!!as.name(measure), probs = seq(.25, 1, by = .25), na.rm = TRUE))
)
df = df[3:5000,"x3"]
shap.df =
tryCatch(
{
x.temp = shapiro.test(df[,measure])
x = data.frame(
"p.value" = format(signif(x.temp$statistic, 3), format = "e", digits = 2),#round(unname(x.temp$p.value), 3),
"statistic" = format(signif(x.temp$statistic, 2), format = "e", digits = 2)#round(unname(x.temp$statistic), 3)
)
},
error = function(df) {
x = data.frame(
"p.value" = "Cannot compute: Groups must be between 3 and 5000",
"statistic" = "Cannot compute: Groups must be between 3 and 5000"
)
return(x)
}
)
df %>%
summarise(
# Count_Patients = sum(!is.na(!!as.name(measure))),
# Mean = round(mean(!!as.name(measure), na.rm = TRUE), round_to),
# SD = round(sd(!!as.name(measure), na.rm = TRUE), round_to),
# Median = round(median(!!as.name(measure), na.rm = TRUE), round_to),
# Mode  = round(mode(!!as.name(measure), na.rm = TRUE), round_to),
# Sum = round(sum(!!as.name(measure), na.rm = TRUE), round_to),
# Skew = round(moments::skewness(!!as.name(measure), na.rm = TRUE), round_to),
# Kurtosis = round(moments::kurtosis(!!as.name(measure), na.rm = TRUE), round_to),
# IQR = round(IQR(!!as.name(measure), na.rm = TRUE), round_to),
# Min = round(min(!!as.name(measure), na.rm = TRUE), round_to),
# Max = round(max(!!as.name(measure), na.rm = TRUE), round_to),
Shapiro_W = shap.df$statistic,
Shapiro_p = shap.df$p.value,
# Count = n(),
# Quantile = list(stats::quantile(!!as.name(measure), probs = seq(.25, 1, by = .25), na.rm = TRUE))
)
shap.df$statistic
measure = "x3"
shap.df =
tryCatch(
{
x.temp = shapiro.test(df[,measure])
x = data.frame(
"p.value" = format(signif(x.temp$statistic, 3), format = "e", digits = 2),#round(unname(x.temp$p.value), 3),
"statistic" = format(signif(x.temp$statistic, 2), format = "e", digits = 2)#round(unname(x.temp$statistic), 3)
)
},
error = function(df) {
x = data.frame(
"p.value" = "Cannot compute: Groups must be between 3 and 5000",
"statistic" = "Cannot compute: Groups must be between 3 and 5000"
)
return(x)
}
)
df %>%
summarise(
# Count_Patients = sum(!is.na(!!as.name(measure))),
# Mean = round(mean(!!as.name(measure), na.rm = TRUE), round_to),
# SD = round(sd(!!as.name(measure), na.rm = TRUE), round_to),
# Median = round(median(!!as.name(measure), na.rm = TRUE), round_to),
# Mode  = round(mode(!!as.name(measure), na.rm = TRUE), round_to),
# Sum = round(sum(!!as.name(measure), na.rm = TRUE), round_to),
# Skew = round(moments::skewness(!!as.name(measure), na.rm = TRUE), round_to),
# Kurtosis = round(moments::kurtosis(!!as.name(measure), na.rm = TRUE), round_to),
# IQR = round(IQR(!!as.name(measure), na.rm = TRUE), round_to),
# Min = round(min(!!as.name(measure), na.rm = TRUE), round_to),
# Max = round(max(!!as.name(measure), na.rm = TRUE), round_to),
Shapiro_W = shap.df$statistic,
Shapiro_p = shap.df$p.value,
# Count = n(),
# Quantile = list(stats::quantile(!!as.name(measure), probs = seq(.25, 1, by = .25), na.rm = TRUE))
)
df %>%
summarise(
Count_Patients = sum(!is.na(!!as.name(measure))),
# Mean = round(mean(!!as.name(measure), na.rm = TRUE), round_to),
# SD = round(sd(!!as.name(measure), na.rm = TRUE), round_to),
# Median = round(median(!!as.name(measure), na.rm = TRUE), round_to),
# Mode  = round(mode(!!as.name(measure), na.rm = TRUE), round_to),
# Sum = round(sum(!!as.name(measure), na.rm = TRUE), round_to),
# Skew = round(moments::skewness(!!as.name(measure), na.rm = TRUE), round_to),
# Kurtosis = round(moments::kurtosis(!!as.name(measure), na.rm = TRUE), round_to),
# IQR = round(IQR(!!as.name(measure), na.rm = TRUE), round_to),
# Min = round(min(!!as.name(measure), na.rm = TRUE), round_to),
# Max = round(max(!!as.name(measure), na.rm = TRUE), round_to),
# Count = n(),
# Quantile = list(stats::quantile(!!as.name(measure), probs = seq(.25, 1, by = .25), na.rm = TRUE))
) %>%
cbind(shap.df)
df %>%
summarise(
Count_Patients = sum(!is.na(!!as.name(measure))),
# Mean = round(mean(!!as.name(measure), na.rm = TRUE), round_to),
# SD = round(sd(!!as.name(measure), na.rm = TRUE), round_to),
# Median = round(median(!!as.name(measure), na.rm = TRUE), round_to),
# Mode  = round(mode(!!as.name(measure), na.rm = TRUE), round_to),
# Sum = round(sum(!!as.name(measure), na.rm = TRUE), round_to),
# Skew = round(moments::skewness(!!as.name(measure), na.rm = TRUE), round_to),
# Kurtosis = round(moments::kurtosis(!!as.name(measure), na.rm = TRUE), round_to),
# IQR = round(IQR(!!as.name(measure), na.rm = TRUE), round_to),
# Min = round(min(!!as.name(measure), na.rm = TRUE), round_to),
# Max = round(max(!!as.name(measure), na.rm = TRUE), round_to),
# Count = n(),
# Quantile = list(stats::quantile(!!as.name(measure), probs = seq(.25, 1, by = .25), na.rm = TRUE))
)
x3
dat$x3
str(dat)
df %>%
summarise(
Count_Patients = sum(!is.na(!!as.name(measure))),
# Mean = round(mean(!!as.name(measure), na.rm = TRUE), round_to),
# SD = round(sd(!!as.name(measure), na.rm = TRUE), round_to),
# Median = round(median(!!as.name(measure), na.rm = TRUE), round_to),
# Mode  = round(mode(!!as.name(measure), na.rm = TRUE), round_to),
# Sum = round(sum(!!as.name(measure), na.rm = TRUE), round_to),
# Skew = round(moments::skewness(!!as.name(measure), na.rm = TRUE), round_to),
# Kurtosis = round(moments::kurtosis(!!as.name(measure), na.rm = TRUE), round_to),
# IQR = round(IQR(!!as.name(measure), na.rm = TRUE), round_to),
# Min = round(min(!!as.name(measure), na.rm = TRUE), round_to),
# Max = round(max(!!as.name(measure), na.rm = TRUE), round_to),
# Count = n(),
# Quantile = list(stats::quantile(!!as.name(measure), probs = seq(.25, 1, by = .25), na.rm = TRUE))
)
df
df %>%
summarise(
Count_Patients = sum(!is.na(!!as.name(measure))),
# Mean = round(mean(!!as.name(measure), na.rm = TRUE), round_to),
# SD = round(sd(!!as.name(measure), na.rm = TRUE), round_to),
# Median = round(median(!!as.name(measure), na.rm = TRUE), round_to),
# Mode  = round(mode(!!as.name(measure), na.rm = TRUE), round_to),
# Sum = round(sum(!!as.name(measure), na.rm = TRUE), round_to),
# Skew = round(moments::skewness(!!as.name(measure), na.rm = TRUE), round_to),
# Kurtosis = round(moments::kurtosis(!!as.name(measure), na.rm = TRUE), round_to),
# IQR = round(IQR(!!as.name(measure), na.rm = TRUE), round_to),
# Min = round(min(!!as.name(measure), na.rm = TRUE), round_to),
# Max = round(max(!!as.name(measure), na.rm = TRUE), round_to),
# Count = n(),
# Quantile = list(stats::quantile(!!as.name(measure), probs = seq(.25, 1, by = .25), na.rm = TRUE))
)
measure
df %>%
summarise(
# Count_Patients = sum(!is.na(!!as.name(measure))),
Mean = round(mean(!!as.name(measure), na.rm = TRUE), round_to),
# SD = round(sd(!!as.name(measure), na.rm = TRUE), round_to),
# Median = round(median(!!as.name(measure), na.rm = TRUE), round_to),
# Mode  = round(mode(!!as.name(measure), na.rm = TRUE), round_to),
# Sum = round(sum(!!as.name(measure), na.rm = TRUE), round_to),
# Skew = round(moments::skewness(!!as.name(measure), na.rm = TRUE), round_to),
# Kurtosis = round(moments::kurtosis(!!as.name(measure), na.rm = TRUE), round_to),
# IQR = round(IQR(!!as.name(measure), na.rm = TRUE), round_to),
# Min = round(min(!!as.name(measure), na.rm = TRUE), round_to),
# Max = round(max(!!as.name(measure), na.rm = TRUE), round_to),
# Count = n(),
# Quantile = list(stats::quantile(!!as.name(measure), probs = seq(.25, 1, by = .25), na.rm = TRUE))
) %>%
cbind(shap.df)
df %>%
summarise(
# Count_Patients = sum(!is.na(!!as.name(measure))),
Mean = round(mean(!!as.name(measure), na.rm = TRUE), round_to),
# SD = round(sd(!!as.name(measure), na.rm = TRUE), round_to),
# Median = round(median(!!as.name(measure), na.rm = TRUE), round_to),
# Mode  = round(mode(!!as.name(measure), na.rm = TRUE), round_to),
# Sum = round(sum(!!as.name(measure), na.rm = TRUE), round_to),
# Skew = round(moments::skewness(!!as.name(measure), na.rm = TRUE), round_to),
# Kurtosis = round(moments::kurtosis(!!as.name(measure), na.rm = TRUE), round_to),
# IQR = round(IQR(!!as.name(measure), na.rm = TRUE), round_to),
# Min = round(min(!!as.name(measure), na.rm = TRUE), round_to),
# Max = round(max(!!as.name(measure), na.rm = TRUE), round_to),
# Count = n(),
# Quantile = list(stats::quantile(!!as.name(measure), probs = seq(.25, 1, by = .25), na.rm = TRUE))
)
df
df = dat
df = df[3:5000,]
df %>%
summarise(
# Count_Patients = sum(!is.na(!!as.name(measure))),
Mean = round(mean(!!as.name(measure), na.rm = TRUE), round_to),
# SD = round(sd(!!as.name(measure), na.rm = TRUE), round_to),
# Median = round(median(!!as.name(measure), na.rm = TRUE), round_to),
# Mode  = round(mode(!!as.name(measure), na.rm = TRUE), round_to),
# Sum = round(sum(!!as.name(measure), na.rm = TRUE), round_to),
# Skew = round(moments::skewness(!!as.name(measure), na.rm = TRUE), round_to),
# Kurtosis = round(moments::kurtosis(!!as.name(measure), na.rm = TRUE), round_to),
# IQR = round(IQR(!!as.name(measure), na.rm = TRUE), round_to),
# Min = round(min(!!as.name(measure), na.rm = TRUE), round_to),
# Max = round(max(!!as.name(measure), na.rm = TRUE), round_to),
# Count = n(),
# Quantile = list(stats::quantile(!!as.name(measure), probs = seq(.25, 1, by = .25), na.rm = TRUE))
)
df %>%
summarise(
# Count_Patients = sum(!is.na(!!as.name(measure))),
Mean = round(mean(!!as.name(measure), na.rm = TRUE), round_to),
# SD = round(sd(!!as.name(measure), na.rm = TRUE), round_to),
# Median = round(median(!!as.name(measure), na.rm = TRUE), round_to),
# Mode  = round(mode(!!as.name(measure), na.rm = TRUE), round_to),
# Sum = round(sum(!!as.name(measure), na.rm = TRUE), round_to),
# Skew = round(moments::skewness(!!as.name(measure), na.rm = TRUE), round_to),
# Kurtosis = round(moments::kurtosis(!!as.name(measure), na.rm = TRUE), round_to),
# IQR = round(IQR(!!as.name(measure), na.rm = TRUE), round_to),
# Min = round(min(!!as.name(measure), na.rm = TRUE), round_to),
# Max = round(max(!!as.name(measure), na.rm = TRUE), round_to),
# Count = n(),
# Quantile = list(stats::quantile(!!as.name(measure), probs = seq(.25, 1, by = .25), na.rm = TRUE))
) %>%
cbind(shap.df)
df %>%
summarise(
Count_Patients = sum(!is.na(!!as.name(measure))),
Mean = round(mean(!!as.name(measure), na.rm = TRUE), round_to),
SD = round(sd(!!as.name(measure), na.rm = TRUE), round_to),
Median = round(median(!!as.name(measure), na.rm = TRUE), round_to),
Mode  = round(mode(!!as.name(measure), na.rm = TRUE), round_to),
Sum = round(sum(!!as.name(measure), na.rm = TRUE), round_to),
Skew = round(moments::skewness(!!as.name(measure), na.rm = TRUE), round_to),
Kurtosis = round(moments::kurtosis(!!as.name(measure), na.rm = TRUE), round_to),
IQR = round(IQR(!!as.name(measure), na.rm = TRUE), round_to),
Min = round(min(!!as.name(measure), na.rm = TRUE), round_to),
Max = round(max(!!as.name(measure), na.rm = TRUE), round_to),
Count = n(),
Quantile = list(stats::quantile(!!as.name(measure), probs = seq(.25, 1, by = .25), na.rm = TRUE))
) %>%
cbind(shap.df)
source("C:/Users/tadam/OneDrive/_Code and Code Projects/Statistics Projects/Regressions Template/Descriptive Stats.R")
DescriptiveTables(df = dat, measure = "x6", round_to = 1)
source("C:/Users/tadam/OneDrive/_Code and Code Projects/Statistics Projects/Regressions Template/Descriptive Stats.R")
DescriptiveTables(df = dat, measure = "x6", round_to = 1)
